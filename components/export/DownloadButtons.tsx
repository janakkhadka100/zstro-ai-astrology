// components/export/DownloadButtons.tsx
// Download buttons for various export formats

"use client";

import { useState } from 'react';
import { Download, FileText, Image, Share2, Loader2 } from 'lucide-react';
import { cn } from '@/lib/utils';
import { getString, type Lang } from '@/lib/utils/i18n';
import { isFeatureEnabled } from '@/lib/config/features';

interface DownloadButtonsProps {
  lang: Lang;
  analysis: string;
  cards: any; // AstroData
  title?: string;
  sessionId?: string;
  className?: string;
}

export function DownloadButtons({ 
  lang, 
  analysis, 
  cards, 
  title,
  sessionId,
  className = '' 
}: DownloadButtonsProps) {
  const [loading, setLoading] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleExport = async (format: 'pdf' | 'image' | 'text') => {
    if (!isFeatureEnabled('export')) {
      setError(getString('fileFormatNotSupported', lang));
      return;
    }

    setLoading(format);
    setError(null);

    try {
      switch (format) {
        case 'pdf':
          await exportToPdf();
          break;
        case 'image':
          await exportToImage();
          break;
        case 'text':
          await exportToText();
          break;
      }
    } catch (err) {
      console.error(`Export ${format} error:`, err);
      setError(
        err instanceof Error 
          ? err.message 
          : getString('dataLoadFailed', lang)
      );
    } finally {
      setLoading(null);
    }
  };

  const exportToPdf = async () => {
    const response = await fetch('/api/export/pdf', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        sessionId,
        analysis,
        cards,
        title,
        lang,
        includeCharts: true,
        includeSnapshots: true,
      }),
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const data = await response.json();
    
    if (data.success) {
      // In a real implementation, this would download the actual PDF
      // For now, we'll open the HTML in a new window for printing
      const newWindow = window.open('', '_blank');
      if (newWindow) {
        newWindow.document.write(data.data.html);
        newWindow.document.close();
        newWindow.print();
      }
    } else {
      throw new Error(data.errors?.[0] || 'PDF export failed');
    }
  };

  const exportToImage = async () => {
    // Create a canvas element to capture the analysis
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    
    if (!ctx) {
      throw new Error('Canvas context not available');
    }

    // Set canvas size
    canvas.width = 800;
    canvas.height = 600;

    // Fill background
    ctx.fillStyle = '#ffffff';
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // Add title
    ctx.fillStyle = '#2c3e50';
    ctx.font = 'bold 24px Arial';
    ctx.textAlign = 'center';
    ctx.fillText(title || (lang === 'ne' ? 'ज्योतिष विश्लेषण' : 'Astrology Analysis'), canvas.width / 2, 50);

    // Add analysis text
    ctx.fillStyle = '#333333';
    ctx.font = '14px Arial';
    ctx.textAlign = 'left';
    
    const lines = analysis.split('\n');
    let y = 100;
    const lineHeight = 20;
    const maxWidth = canvas.width - 40;
    
    for (const line of lines) {
      if (y > canvas.height - 50) break;
      
      // Simple text wrapping
      const words = line.split(' ');
      let currentLine = '';
      
      for (const word of words) {
        const testLine = currentLine + word + ' ';
        const metrics = ctx.measureText(testLine);
        
        if (metrics.width > maxWidth && currentLine !== '') {
          ctx.fillText(currentLine, 20, y);
          y += lineHeight;
          currentLine = word + ' ';
        } else {
          currentLine = testLine;
        }
      }
      
      if (currentLine) {
        ctx.fillText(currentLine, 20, y);
        y += lineHeight;
      }
    }

    // Add footer
    ctx.fillStyle = '#7f8c8d';
    ctx.font = '12px Arial';
    ctx.textAlign = 'center';
    ctx.fillText(
      lang === 'ne' 
        ? 'ZSTRO AI ज्योतिष सहायक द्वारा तयार गरिएको' 
        : 'Generated by ZSTRO AI Astrology Assistant',
      canvas.width / 2,
      canvas.height - 20
    );

    // Convert to blob and download
    canvas.toBlob((blob) => {
      if (blob) {
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `${title || 'astrology-analysis'}.png`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      }
    }, 'image/png');
  };

  const exportToText = async () => {
    const textContent = generateTextContent();
    
    const blob = new Blob([textContent], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${title || 'astrology-analysis'}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const generateTextContent = (): string => {
    const isNepali = lang === 'ne';
    const header = isNepali ? 'ज्योतिष विश्लेषण रिपोर्ट' : 'Astrology Analysis Report';
    const generatedOn = isNepali ? 'तयार गरिएको मिति' : 'Generated on';
    const date = new Date().toLocaleDateString(lang === 'ne' ? 'ne-NP' : 'en-US');
    
    let content = `${header}\n`;
    content += `${'='.repeat(header.length)}\n\n`;
    content += `${generatedOn}: ${date}\n\n`;
    
    if (title) {
      content += `${isNepali ? 'शीर्षक' : 'Title'}: ${title}\n\n`;
    }
    
    // Add cards data
    if (cards) {
      content += `${isNepali ? 'ज्योतिष कार्डहरू' : 'Astrology Cards'}\n`;
      content += `${'-'.repeat(isNepali ? 20 : 18)}\n\n`;
      
      if (cards.d1 && cards.d1.length > 0) {
        content += `${isNepali ? 'ग्रहहरू (D1)' : 'Planets (D1)'}:\n`;
        cards.d1.forEach((planet: any) => {
          content += `  ${planet.planet}${planet.retro ? ' (R)' : ''} - ${planet.signLabel} (#${planet.signId}) - H${planet.house}\n`;
        });
        content += '\n';
      }
      
      if (cards.yogas && cards.yogas.length > 0) {
        content += `${isNepali ? 'योगहरू' : 'Yogas'}:\n`;
        cards.yogas.forEach((yoga: any) => {
          content += `  • ${yoga.label}`;
          if (yoga.factors && yoga.factors.length > 0) {
            content += ` (${isNepali ? 'कारक' : 'Factors'}: ${yoga.factors.join(', ')})`;
          }
          content += '\n';
        });
        content += '\n';
      }
      
      if (cards.doshas && cards.doshas.length > 0) {
        content += `${isNepali ? 'दोषहरू' : 'Doshas'}:\n`;
        cards.doshas.forEach((dosha: any) => {
          content += `  • ${dosha.label}`;
          if (dosha.factors && dosha.factors.length > 0) {
            content += ` (${isNepali ? 'कारक' : 'Factors'}: ${dosha.factors.join(', ')})`;
          }
          content += '\n';
        });
        content += '\n';
      }
    }
    
    // Add analysis
    content += `${isNepali ? 'विश्लेषण' : 'Analysis'}\n`;
    content += `${'-'.repeat(isNepali ? 12 : 9)}\n\n`;
    content += analysis;
    content += '\n\n';
    
    // Add footer
    content += `${'-'.repeat(50)}\n`;
    content += isNepali 
      ? 'ZSTRO AI ज्योतिष सहायक द्वारा तयार गरिएको\n'
      : 'Generated by ZSTRO AI Astrology Assistant\n';
    content += 'https://zstro.ai\n';
    
    return content;
  };

  const shareContent = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: title || (lang === 'ne' ? 'ज्योतिष विश्लेषण' : 'Astrology Analysis'),
          text: analysis.substring(0, 200) + '...',
          url: window.location.href,
        });
      } catch (err) {
        console.error('Share failed:', err);
      }
    } else {
      // Fallback: copy to clipboard
      try {
        await navigator.clipboard.writeText(analysis);
        // You could show a toast notification here
        console.log('Analysis copied to clipboard');
      } catch (err) {
        console.error('Copy failed:', err);
      }
    }
  };

  if (!isFeatureEnabled('export')) {
    return null;
  }

  return (
    <div className={cn("space-y-4", className)}>
      {/* Error display */}
      {error && (
        <div className="text-red-600 text-sm bg-red-50 dark:bg-red-900/20 p-2 rounded">
          {error}
        </div>
      )}

      {/* Download buttons */}
      <div className="flex flex-wrap gap-2">
        <button
          onClick={() => handleExport('pdf')}
          disabled={loading === 'pdf'}
          className={cn(
            "inline-flex items-center space-x-2 px-4 py-2 rounded-lg",
            "bg-red-600 text-white hover:bg-red-700",
            "disabled:opacity-50 disabled:cursor-not-allowed",
            "transition-colors"
          )}
        >
          {loading === 'pdf' ? (
            <Loader2 className="size-4 animate-spin" />
          ) : (
            <FileText className="size-4" />
          )}
          <span className="text-sm font-medium">
            {lang === 'ne' ? 'PDF डाउनलोड' : 'Download PDF'}
          </span>
        </button>

        <button
          onClick={() => handleExport('image')}
          disabled={loading === 'image'}
          className={cn(
            "inline-flex items-center space-x-2 px-4 py-2 rounded-lg",
            "bg-blue-600 text-white hover:bg-blue-700",
            "disabled:opacity-50 disabled:cursor-not-allowed",
            "transition-colors"
          )}
        >
          {loading === 'image' ? (
            <Loader2 className="size-4 animate-spin" />
          ) : (
            <Image className="size-4" aria-hidden="true" />
          )}
          <span className="text-sm font-medium">
            {lang === 'ne' ? 'इमेज डाउनलोड' : 'Download Image'}
          </span>
        </button>

        <button
          onClick={() => handleExport('text')}
          disabled={loading === 'text'}
          className={cn(
            "inline-flex items-center space-x-2 px-4 py-2 rounded-lg",
            "bg-gray-600 text-white hover:bg-gray-700",
            "disabled:opacity-50 disabled:cursor-not-allowed",
            "transition-colors"
          )}
        >
          {loading === 'text' ? (
            <Loader2 className="size-4 animate-spin" />
          ) : (
            <Download className="size-4" />
          )}
          <span className="text-sm font-medium">
            {lang === 'ne' ? 'टेक्स्ट डाउनलोड' : 'Download Text'}
          </span>
        </button>

        <button
          onClick={shareContent}
          className={cn(
            "inline-flex items-center space-x-2 px-4 py-2 rounded-lg",
            "bg-green-600 text-white hover:bg-green-700",
            "transition-colors"
          )}
        >
          <Share2 className="size-4" />
          <span className="text-sm font-medium">
            {lang === 'ne' ? 'साझा गर्नुहोस्' : 'Share'}
          </span>
        </button>
      </div>

      {/* Export info */}
      <div className="text-xs text-gray-500 dark:text-gray-400">
        {lang === 'ne' 
          ? 'PDF: प्रिन्ट-योग्य रिपोर्ट | इमेज: PNG फर्म्याट | टेक्स्ट: सादा पाठ'
          : 'PDF: Print-ready report | Image: PNG format | Text: Plain text'
        }
      </div>
    </div>
  );
}
