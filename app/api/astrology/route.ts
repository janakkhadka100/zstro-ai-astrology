// app/api/astrology/route.ts
// LLM analysis endpoint - uses cards data only

import { NextResponse } from "next/server";
import { getAstroData } from "@/lib/prokerala/service";
import { buildPrompt } from "@/lib/llm/prompt";
import { AstroAnalysisRequest, AstroAnalysisResponse } from "@/lib/astrology/types";

export async function POST(req: Request) {
  try {
    const body = await req.json().catch(() => ({}));
    
    // Validate and normalize request parameters
    const requestData: AstroAnalysisRequest = {
      lang: body?.lang === "en" ? "en" : "ne",
      question: body?.question || body?.q || (body?.lang === "en" ? "Please analyze my horoscope." : "कुण्डली विश्लेषण दिनुहोस्।"),
    };

    // Fetch normalized astro data (source of truth)
    const data = await getAstroData({ lang: requestData.lang });
    
    // Build prompts from cards data only
    const { system, user, combined } = buildPrompt(
      requestData.lang, 
      data, 
      requestData.question!
    );

    // For now, return the prompt structure (in production, this would call LLM)
    const response: AstroAnalysisResponse = {
      promptPreview: combined,
      text: `Analysis based on cards data:\n\n${user}\n\n[LLM analysis would be generated here using the above prompt]`,
      answer: `Based on the provided astrological data, here's the analysis:\n\n${user}`,
      analysis: `This is a placeholder analysis. In production, this would be generated by the LLM using the prompt above.`
    };

    return NextResponse.json(response, { 
      status: 200,
      headers: {
        'Content-Type': 'application/json',
        'Cache-Control': 'no-cache, no-store, must-revalidate'
      }
    });
    
  } catch (error) {
    console.error('Error in /api/astrology:', error);
    
    return NextResponse.json(
      { 
        error: 'Failed to generate astrology analysis',
        message: error instanceof Error ? error.message : 'Unknown error'
      }, 
      { status: 500 }
    );
  }
}

// Handle GET requests for testing
export async function GET() {
  try {
    const data = await getAstroData({ lang: "ne" });
    const { combined } = buildPrompt("ne", data, "कुण्डली विश्लेषण दिनुहोस्।");
    
    return NextResponse.json({ 
      promptPreview: combined,
      message: "GET request successful. Use POST for analysis."
    }, { 
      status: 200,
      headers: {
        'Content-Type': 'application/json',
        'Cache-Control': 'no-cache, no-store, must-revalidate'
      }
    });
  } catch (error) {
    console.error('Error in GET /api/astrology:', error);
    return NextResponse.json(
      { error: 'Failed to generate astrology analysis' }, 
      { status: 500 }
    );
  }
}