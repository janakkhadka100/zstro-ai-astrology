// tests/astro/nepali-prompt.spec.ts
// Unit tests for Nepali prompt system

import { 
  getNepaliSystemPrompt, 
  buildNepaliUserPrompt,
  NEPALI_SYSTEM_PROMPT
} from '../../src/astro/ai/nepali-prompt';

describe('Nepali Prompt System', () => {
  test('should return Nepali system prompt', () => {
    const prompt = getNepaliSystemPrompt();
    expect(prompt).toBe(NEPALI_SYSTEM_PROMPT);
  });

  test('should include role definition in Nepali', () => {
    const prompt = getNepaliSystemPrompt();
    
    expect(prompt).toContain('ZSTRO AI ‡§ú‡•ç‡§Ø‡•ã‡§§‡§ø‡§∑ ‡§∏‡§π‡§æ‡§Ø‡§ï');
    expect(prompt).toContain('Prokerala API ‡§¨‡§æ‡§ü ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡•Å‡§£‡•ç‡§°‡§≤‡•Ä ‡§µ‡§ø‡§µ‡§∞‡§£');
  });

  test('should include yoga verification rules', () => {
    const prompt = getNepaliSystemPrompt();
    
    expect(prompt).toContain('‡§ó‡§ú‡§ï‡•á‡§∏‡§∞‡•Ä ‡§Ø‡•ã‡§ó');
    expect(prompt).toContain('‡§ï‡§æ‡§≤‡§∏‡§∞‡•ç‡§™ ‡§¶‡•ã‡§∑');
    expect(prompt).toContain('‡§Æ‡§Ç‡§ó‡§≤ ‡§¶‡•ã‡§∑');
    expect(prompt).toContain('Prokerala ‡§ï‡•ã ‡§°‡§æ‡§ü‡§æ‡§ï‡§æ ‡§Ü‡§ß‡§æ‡§∞‡§Æ‡§æ');
  });

  test('should include house calculation formula in Nepali', () => {
    const prompt = getNepaliSystemPrompt();
    
    expect(prompt).toContain('‡§ò‡§∞ = ((‡§ó‡•ç‡§∞‡§π_‡§∞‡§æ‡§∂‡§ø - ‡§≤‡§ó‡•ç‡§®_‡§∞‡§æ‡§∂‡§ø + ‡•ß‡•®) % ‡•ß‡•®) + ‡•ß');
    expect(prompt).toContain('‡§µ‡•É‡§∑ (‡•®)');
    expect(prompt).toContain('‡§µ‡•É‡§∂‡•ç‡§ö‡§ø‡§ï (‡•Æ)');
  });

  test('should include analysis framework in Nepali', () => {
    const prompt = getNepaliSystemPrompt();
    
    expect(prompt).toContain('ü™ê ‡§ó‡•ç‡§∞‡§π ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§∞ ‡§ò‡§∞ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£');
    expect(prompt).toContain('üîØ ‡§Ø‡•ã‡§ó ‡§∞ ‡§¶‡•ã‡§∑‡§π‡§∞‡•Ç');
    expect(prompt).toContain('üßò ‡§¶‡§∂‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£');
    expect(prompt).toContain('üìä ‡§µ‡§ø‡§≠‡§æ‡§ú‡§® ‡§ö‡§æ‡§∞‡•ç‡§ü ‡§Ö‡§®‡•ç‡§§‡§∞‡•ç‡§¶‡•É‡§∑‡•ç‡§ü‡§ø');
  });

  test('should include language and style requirements', () => {
    const prompt = getNepaliSystemPrompt();
    
    expect(prompt).toContain('‡§®‡•á‡§™‡§æ‡§≤‡•Ä ‡§≠‡§æ‡§∑‡§æ‡§Æ‡§æ');
    expect(prompt).toContain('‡§∏‡§∞‡§≤, ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§∞ ‡§Ü‡§¶‡§∞‡§™‡•Ç‡§∞‡•ç‡§£');
    expect(prompt).toContain('‡§∏‡§Ç‡§∏‡•ç‡§ï‡•É‡§§-‡§Ö‡§µ‡§ß‡§æ‡§∞‡§£‡§æ‡§Æ‡§æ');
  });

  test('should include response structure requirements', () => {
    const prompt = getNepaliSystemPrompt();
    
    expect(prompt).toContain('‡§™‡•ç‡§∞‡§∏‡•ç‡§§‡§æ‡§µ‡§®‡§æ');
    expect(prompt).toContain('‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§µ‡§ø‡§µ‡§∞‡§£');
    expect(prompt).toContain('‡§µ‡§∞‡•ç‡§ó‡•Ä‡§ï‡§∞‡§£');
    expect(prompt).toContain('‡§™‡•à‡§∞‡§æ‡§ó‡•ç‡§∞‡§æ‡§´');
    expect(prompt).toContain('‡§â‡§™‡§ö‡§æ‡§∞');
    expect(prompt).toContain('‡§∏‡§Æ‡§æ‡§™‡§®');
  });

  test('should include prohibited actions in Nepali', () => {
    const prompt = getNepaliSystemPrompt();
    
    expect(prompt).toContain('‚ùå ‡§®‡§ø‡§∑‡•á‡§ß‡§ø‡§§ ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§π‡§∞‡•Ç:');
    expect(prompt).toContain('‡§Æ‡•É‡§§‡•ç‡§Ø‡•Å ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§æ‡§£‡•Ä');
    expect(prompt).toContain('‡§Ö‡§®‡•Å‡§Æ‡§æ‡§®‡§ø‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä');
    expect(prompt).toContain('‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø‡•Ä‡§ï‡§∞‡§£');
  });

  test('should include required practices in Nepali', () => {
    const prompt = getNepaliSystemPrompt();
    
    expect(prompt).toContain('‚úÖ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏‡§π‡§∞‡•Ç:');
    expect(prompt).toContain('‡§°‡§æ‡§ü‡§æ ‡§∏‡§§‡•ç‡§Ø‡§§‡§æ');
    expect(prompt).toContain('‡§µ‡•ç‡§Ø‡§æ‡§™‡§ï ‡§ï‡§µ‡§∞‡•á‡§ú');
    expect(prompt).toContain('‡§µ‡•ç‡§Ø‡§æ‡§µ‡§∏‡§æ‡§Ø‡§ø‡§ï ‡§™‡•ç‡§∞‡§∏‡•ç‡§§‡•Å‡§§‡§ø');
  });

  test('should build user prompt with proper structure', () => {
    const mockAstroData = {
      ascendant: { sign: 'Aries', degree: 10, lord: 'Mars' },
      planets: [
        { planet: 'Sun', sign: 'Leo', house: 5, degree: 15 }
      ]
    };

    const userPrompt = buildNepaliUserPrompt(mockAstroData, 'Test question');

    expect(userPrompt).toContain('Test question');
    expect(userPrompt).toContain('Prokerala API ‡§°‡§æ‡§ü‡§æ‡§ï‡•ã ‡§Ü‡§ß‡§æ‡§∞‡§Æ‡§æ');
    expect(userPrompt).toContain('‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ‡§π‡§∞‡•Ç');
    expect(userPrompt).toContain('‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂‡§π‡§∞‡•Ç');
  });

  test('should include analysis requirements in user prompt', () => {
    const mockAstroData = {
      ascendant: { sign: 'Aries' }, 
      planets: []
    };

    const userPrompt = buildNepaliUserPrompt(mockAstroData, 'Test question');

    expect(userPrompt).toContain('ü™ê ‡§ó‡•ç‡§∞‡§π ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§∞ ‡§ò‡§∞ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£');
    expect(userPrompt).toContain('üîØ ‡§Ø‡•ã‡§ó ‡§∞ ‡§¶‡•ã‡§∑‡§π‡§∞‡•Ç');
    expect(userPrompt).toContain('üßò ‡§¶‡§∂‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£');
    expect(userPrompt).toContain('üìä ‡§µ‡§ø‡§≠‡§æ‡§ú‡§® ‡§ö‡§æ‡§∞‡•ç‡§ü ‡§Ö‡§®‡•ç‡§§‡§∞‡•ç‡§¶‡•É‡§∑‡•ç‡§ü‡§ø');
    expect(userPrompt).toContain('üíº ‡§ú‡•Ä‡§µ‡§® ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£');
    expect(userPrompt).toContain('üí™ ‡§∂‡§¶‡•ç‡§¨‡§≤ ‡§∂‡§ï‡•ç‡§§‡§ø');
    expect(userPrompt).toContain('üîÆ ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂ ‡§∞ ‡§â‡§™‡§ö‡§æ‡§∞‡§π‡§∞‡•Ç');
  });

  test('should include critical instructions in user prompt', () => {
    const mockAstroData = {
      ascendant: { sign: 'Aries' }, 
      planets: []
    };

    const userPrompt = buildNepaliUserPrompt(mockAstroData, 'Test question');

    expect(userPrompt).toContain('Prokerala API ‡§°‡§æ‡§ü‡§æ ‡§Æ‡§æ‡§§‡•ç‡§∞ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç');
    expect(userPrompt).toContain('‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§ö‡§æ‡§∞‡•ç‡§ü ‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§π‡§∞‡•Ç ‡§∞ ‡§ó‡§£‡§®‡§æ‡§π‡§∞‡•Ç ‡§∏‡§®‡•ç‡§¶‡§∞‡•ç‡§≠ ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç');
    expect(userPrompt).toContain('‡§≤‡§ó‡•ç‡§®, ‡§®‡§µ‡§Æ‡§æ‡§Ç‡§∂, ‡§∞ ‡§ö‡§®‡•ç‡§¶‡•ç‡§∞ ‡§ï‡•Å‡§£‡•ç‡§°‡§≤‡•Ä‡§¨‡§æ‡§ü ‡§Ö‡§®‡•ç‡§§‡§∞‡•ç‡§¶‡•É‡§∑‡•ç‡§ü‡§ø‡§π‡§∞‡•Ç');
    expect(userPrompt).toContain('‡§ï‡§π‡§ø‡§≤‡•ç‡§Ø‡•à ‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§Æ‡•É‡§§‡•ç‡§Ø‡•Å ‡§Æ‡§ø‡§§‡§ø ‡§µ‡§æ ‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§Æ‡•É‡§§‡•ç‡§Ø‡•Å ‡§â‡§Æ‡•á‡§∞ ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§æ‡§£‡•Ä ‡§®‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç');
  });

  test('should include data structure in user prompt', () => {
    const mockAstroData = {
      ascendant: { sign: 'Aries', degree: 10, lord: 'Mars' },
      planets: [
        { planet: 'Sun', sign: 'Leo', house: 5, degree: 15, isRetro: false }
      ],
      dashas: {
        vimshottari: {
          current: { planet: 'Jupiter', start: '2023-01-01', end: '2039-01-01' }
        }
      },
      yogas: {
        panchMahapurush: [],
        vipareetaRajyoga: []
      }
    };

    const userPrompt = buildNepaliUserPrompt(mockAstroData, 'Test question');

    // Check that data is included in JSON format
    expect(userPrompt).toContain('"ascendant"');
    expect(userPrompt).toContain('"planets"');
    expect(userPrompt).toContain('"dashas"');
    expect(userPrompt).toContain('"yogas"');
  });

  test('should handle empty question gracefully', () => {
    const mockAstroData = {
      ascendant: { sign: 'Aries' }, 
      planets: []
    };

    const userPrompt = buildNepaliUserPrompt(mockAstroData, '');

    expect(userPrompt).toContain('‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ï‡•Å‡§£‡•ç‡§°‡§≤‡•Ä ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£');
  });

  test('should include proper Nepali terminology', () => {
    const prompt = getNepaliSystemPrompt();
    
    expect(prompt).toContain('‡§∞‡§æ‡§∂‡§ø');
    expect(prompt).toContain('‡§≠‡§æ‡§µ');
    expect(prompt).toContain('‡§ó‡•ç‡§∞‡§π');
    expect(prompt).toContain('‡§≤‡§ó‡•ç‡§®');
    expect(prompt).toContain('‡§ö‡§®‡•ç‡§¶‡•ç‡§∞‡§Æ‡§æ');
    expect(prompt).toContain('‡§¨‡•É‡§π‡§∏‡•ç‡§™‡§§‡§ø');
    expect(prompt).toContain('‡§∞‡§æ‡§π‡•Å');
    expect(prompt).toContain('‡§ï‡•á‡§§‡•Å');
  });

  test('should include verification requirements', () => {
    const prompt = getNepaliSystemPrompt();
    
    expect(prompt).toContain('‡§ï‡•ç‡§∞‡§∏-‡§ö‡•á‡§ï ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç');
    expect(prompt).toContain('‡§§‡§•‡•ç‡§Ø‡§Æ‡§æ ‡§®‡§Ö_found_ ‡§≠‡§è‡§ï‡§æ ‡§Ø‡•ã‡§ó/‡§¶‡•ã‡§∑');
    expect(prompt).toContain('‡§µ‡§ø‡§®‡§Æ‡•ç‡§∞‡§§‡§∞‡§ø‡§ï‡§æ‡§≤‡•á');
    expect(prompt).toContain('‡§Ö‡§®‡•ç‡§§‡§ø‡§Æ ‡§™‡§ü‡§ï');
  });
});
